# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

#Azure pipeline for continuous integration

trigger:
  paths:
    exclude:
      - docs
jobs:
  - job: Fastseq_unittests
    timeoutInMinutes: 360
    pool:
      name: default
      demands:
        - agent.name -equals gpu3
    container:
      image: huggingface/transformers-pytorch-gpu:latest
      options: --gpus device=3
    steps:
    - script: |
        #install python
        echo "installing python"
        apt-get update -y
        apt-get install python -y
        which python
        which python3
        # apt-get update
        # apt-get install python3-venv
        # alias python=python3
        # which python3
        echo "python installed"
        #install fastseq

        pip install --upgrade pip

        which pip
        which python 

        pip install sentencepiece==0.1.90
        pip install torch==1.10.0

        echo "******* Installing fairseq *******"
        pip install fairseq==0.10.2
        pip show fairseq

        echo "******* Installing transformers *******"
        pip install transformers==4.12.0
        pip show transformers

        echo "******* Installing fastseq *******"
        pip install --editable .
        pip show fastseq

        echo "******* Adding local bin to path *******"
        export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

        echo "******* Running fastseq unittests *******"
        pip install pytorch-transformers==1.0.0
        bash tests/run_fastseq_tests.sh

        #cd benchmarks/
        #bash run_all_benchmarks.sh

        #show environment
        which python
        python --version
        nvcc --version
        python -c "import torch; print('torch:', torch.__version__, torch)"
        python -c "import torch; print('CUDA available:', torch.cuda.is_available())"

        echo "******* Running fairseq unittests *******"
        # bash tests/run_fairseq_tests.sh

        echo "******* Running transformers unittests *******"
        # bash tests/run_transformers_tests.sh

      displayName: 'run fastseq unit tests'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunTitle: 'Publish test results for Python $(python.version)'
        testResultsFiles: 'tests/log_xml/*.xml'
        failTaskOnFailedTests: true
